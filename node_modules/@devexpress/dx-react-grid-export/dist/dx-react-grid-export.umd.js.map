{"version":3,"file":"dx-react-grid-export.umd.js","sources":["../../dx-react-grid/src/plugins/internal/table-group-row-columns.tsx","../../dx-react-grid/src/plugins/internal/grid-core-getters.tsx","../../dx-react-grid/src/plugins/internal/table-columns-getter.tsx","../../dx-react-grid/src/plugins/internal/visible-table-columns.tsx","../../dx-react-grid/src/plugins/internal/ordered-table-columns.tsx","../../dx-react-grid/src/components/summary/constants.ts","../src/plugins/helpers.ts","../src/plugins/grid-exporter-core.tsx","../src/plugins/grid-exporter.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Getter, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping } from '@devexpress/dx-grid-core';\nimport { ShowColumnWhenGroupedGetterFn, TableColumnsWithGroupingProps } from '../../types';\n\nconst showColumnWhenGroupedGetter: ShowColumnWhenGroupedGetterFn = (\n  showColumnsWhenGrouped, columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\n/** @internal */\nexport const TableColumnsWithGrouping: React.FunctionComponent<\n  TableColumnsWithGroupingProps\n> = React.memo(({\n  indentColumnWidth, showColumnsWhenGrouped, columnExtensions,\n}) => {\n  const tableColumnsComputed = ({\n    columns, tableColumns, grouping, draftGrouping,\n  }: Getters) => tableColumnsWithGrouping(\n    columns,\n    tableColumns,\n    grouping,\n    draftGrouping,\n    indentColumnWidth!,\n    showColumnWhenGroupedGetter(showColumnsWhenGrouped!, columnExtensions),\n  );\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0,\n};\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\nimport { GridCoreGettersProps } from '../../types';\n\nexport const GridCoreGetters: React.FunctionComponent<GridCoreGettersProps> = React.memo(({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n}) => (\n  <Plugin>\n    <Getter name=\"rows\" value={rows} />\n    <Getter name=\"getRowId\" value={rowIdGetter(getRowId!, rows)} />\n    <Getter name=\"columns\" value={columns} />\n    <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue!, columns)} />\n  </Plugin>\n));\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithDataRows, checkTableColumnExtensions } from '@devexpress/dx-grid-core';\nimport { Table } from '../../types';\n\nexport const TableColumnsWithDataRowsGetter: React.FunctionComponent<\n  { columnExtensions?: Table.ColumnExtension[]; }\n> = React.memo(({ columnExtensions }) => {\n  const tableColumnsComputed = React.useCallback(\n    ({ columns }) => (\n      tableColumnsWithDataRows(columns, columnExtensions!)\n    ), [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  visibleTableColumns,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumnsProps } from '../../types';\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames }: Getters,\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\n/** @internal */\nexport const VisibleTableColumns: React.FunctionComponent<\n  VisibleTableColumnsProps\n> = React.memo(({\n  hiddenColumnNames,\n}) => (\n  <Plugin>\n    <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n    <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n  </Plugin>\n));\n\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: [],\n};\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  orderedColumns,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumnsProps } from '../../types';\n\n/** @internal */\nexport const OrderedTableColumns: React.FunctionComponent<\n  OrderedTableColumnsProps\n> = ({\n  order,\n}) => {\n  const columnsComputed = (\n    { tableColumns }: Getters,\n  ) => orderedColumns(tableColumns, order!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={columnsComputed} />\n    </Plugin>\n  );\n};\n\nOrderedTableColumns.defaultProps = {\n  order: [],\n};\n","export const defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count',\n};\n","/* tslint:disable no-submodule-imports */\nimport * as Excel from 'exceljs/dist/exceljs.min.js';\n/* tslint:enable no-submodule-imports */\n\nexport const createWorkbook = () => new Excel.Workbook();\n\nexport const createWorksheet = (workbook: Excel.Workbook) => workbook.addWorksheet('Main');\n","import * as React from 'react';\n\nimport {\n  Action, Actions, Plugin, Getter, Template, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  exportHeader, exportRows, closeGroupGetter, closeSheet, groupOutlineLevels, rowsToExport,\n  buildGroupTree, exportSummaryGetter, maximumGroupLevel,\n} from '@devexpress/dx-grid-core';\nimport {\n  IntegratedGrouping, GroupingState, SummaryState, IntegratedSummary, Table, SelectionState,\n  FilteringState, IntegratedFiltering, SortingState, IntegratedSorting,\n} from '@devexpress/dx-react-grid';\n\n/* tslint:disable no-submodule-imports */\nimport {\n  TableColumnsWithGrouping, TableColumnsWithDataRowsGetter,\n  VisibleTableColumns, OrderedTableColumns, GridCoreGetters,\n} from '../../../dx-react-grid/src/plugins/internal';\nimport {\n  defaultSummaryMessages,\n} from '../../../dx-react-grid/src/components/summary/constants';\n/* tslint:enable no-submodule-imports */\nimport { createWorkbook, createWorksheet } from './helpers';\nimport { ExporterProps } from '../types';\n\nconst maxGroupLevelComputed = ({ grouping }: Getters) => maximumGroupLevel(grouping);\nconst outlineLevelsComputed = ({ grouping }: Getters) => groupOutlineLevels(grouping);\nconst rowsToExportComputed = ({\n  rows, selection, grouping, getCollapsedRows, getRowId, isGroupRow,\n}: Getters) => rowsToExport(\n  rows, selection, grouping, getCollapsedRows, getRowId, isGroupRow,\n);\nconst groupTreeComputed = ({\n  rows, outlineLevels, grouping, isGroupRow, groupSummaryItems,\n}: Getters) => buildGroupTree(\n  rows, outlineLevels, grouping, isGroupRow, groupSummaryItems,\n);\nconst exportSummaryComputed = ({\n  worksheet, tableColumns, customizeSummaryCell,\n}: Getters) => exportSummaryGetter(\n  worksheet, tableColumns, customizeSummaryCell, defaultSummaryMessages,\n);\nconst getCloseGroupComputed = ({\n  worksheet, groupTree, outlineLevels, maxGroupLevel, groupSummaryItems, exportSummary,\n}: Getters) => closeGroupGetter(\n  worksheet, groupTree, outlineLevels, maxGroupLevel, groupSummaryItems, exportSummary,\n);\n\nexport class GridExporterCore extends React.PureComponent<ExporterProps> {\n  static defaultProps = {\n    grouping: [],\n    customizeHeader: () => {},\n    customizeFooter: () => {},\n    customizeCell: () => {},\n    customizeSummaryCell: () => {},\n  };\n\n  performExport = (_: any,\n    {\n    tableColumns, columns: dataColumns, exportSummary, getCloseGroup,\n    getCellValue, isGroupRow, rows, worksheet, workbook, maxGroupLevel,\n    totalSummaryItems, outlineLevels, groupTree,\n  }: Getters,\n  {\n    finishExport,\n  }: Actions) => {\n    const {\n      onSave, customizeCell, customizeHeader, customizeFooter,\n    } = this.props;\n    const columns = tableColumns.filter(c => c.type === Table.COLUMN_TYPE);\n\n    customizeHeader!(worksheet);\n\n    exportHeader(worksheet, columns);\n    const dataRowsOffset = worksheet.lastRow?.number + 1;\n\n    exportRows(\n      worksheet, rows, dataColumns, columns, isGroupRow, outlineLevels, dataRowsOffset,\n      getCellValue, getCloseGroup, customizeCell!,\n    );\n\n    closeSheet(\n      worksheet, groupTree, maxGroupLevel, dataRowsOffset, totalSummaryItems, exportSummary,\n    );\n\n    customizeFooter!(worksheet);\n\n    onSave(workbook);\n\n    finishExport();\n  }\n\n  render() {\n    const {\n      rows: propRows, columns: propColumns, getCellValue, getRowId, columnExtensions,\n      columnOrder, hiddenColumnNames, grouping, showColumnsWhenGrouped, groupColumnExtensions,\n      filters, sorting, selection, totalSummaryItems, groupSummaryItems, customizeSummaryCell,\n      exportSelected,\n    } = this.props;\n\n    const workbook = createWorkbook();\n    const worksheet = createWorksheet(workbook);\n\n    const summaryExists = totalSummaryItems || groupSummaryItems;\n    const useGrouping = !!grouping?.length;\n    const useSelection = exportSelected && !!selection;\n    const useFilters = !!filters;\n    const useSorting = !!sorting;\n    const useColumnOrder = !!columnOrder;\n    const useColumnVisibility = !!hiddenColumnNames;\n\n    return (\n      <Plugin>\n        <GridCoreGetters\n          rows={propRows}\n          columns={propColumns}\n          getRowId={getRowId}\n          getCellValue={getCellValue}\n        />\n        <TableColumnsWithDataRowsGetter\n          columnExtensions={columnExtensions}\n        />\n        {useColumnVisibility && (\n          <VisibleTableColumns hiddenColumnNames={hiddenColumnNames} />\n        )}\n        {useColumnOrder && (\n          <OrderedTableColumns order={columnOrder} />\n        )}\n        <Getter name=\"isExporting\" value />\n\n        {/* State */}\n        {useFilters && (\n          <FilteringState filters={filters} />\n        )}\n        {useSorting && (\n          <SortingState sorting={sorting} />\n        )}\n        {useGrouping && (\n          <GroupingState grouping={grouping} />\n        )}\n        {summaryExists && (\n          <SummaryState totalItems={totalSummaryItems} groupItems={groupSummaryItems} />\n        )}\n        {useSelection && (\n          <SelectionState selection={selection} />\n        )}\n\n        {/* Integrated */}\n        {useGrouping && (\n          <TableColumnsWithGrouping\n            columnExtensions={groupColumnExtensions}\n            showColumnsWhenGrouped={showColumnsWhenGrouped}\n          />\n        )}\n        {useFilters && (\n          <IntegratedFiltering />\n        )}\n        {useSorting && (\n          <IntegratedSorting />\n        )}\n        {useGrouping && (\n          <IntegratedGrouping />\n        )}\n        {summaryExists && (\n          <IntegratedSummary />\n        )}\n\n        <Getter name=\"customizeSummaryCell\" value={customizeSummaryCell} />\n        <Getter name=\"workbook\" value={workbook} />\n        <Getter name=\"worksheet\" value={worksheet} />\n        <Getter name=\"maxGroupLevel\" computed={maxGroupLevelComputed} />\n        <Getter name=\"outlineLevels\" computed={outlineLevelsComputed} />\n        <Getter name=\"rows\" computed={rowsToExportComputed} />\n        <Getter name=\"groupTree\" computed={groupTreeComputed} />\n        <Getter name=\"exportSummary\" computed={exportSummaryComputed} />\n        <Getter name=\"getCloseGroup\" computed={getCloseGroupComputed} />\n\n        <Action name=\"performExport\" action={this.performExport} />\n        <Template name=\"root\">\n          {() => (\n            <TemplateConnector>\n              {(_, { performExport }) => {\n                performExport();\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  Action, Plugin, PluginHost,\n} from '@devexpress/dx-react-core';\nimport { GridExporterCore } from './grid-exporter-core';\nimport { ExporterProps, ExporterState } from '../types/export/exporter.types';\n\nclass GridExporterBase extends React.PureComponent<ExporterProps, ExporterState> {\n  state = {\n    isExporting: false,\n    selectedOnly: false,\n  };\n\n  exportGrid = (options) => {\n    this.setState({\n      isExporting: true,\n      selectedOnly: false,\n      ...options,\n    });\n  }\n\n  finishExport = () => {\n    // NOTE: we can't update state during the render phase\n    window.setTimeout(() => {\n      this.setState({\n        isExporting: false,\n        selectedOnly: false,\n      });\n    }, 0);\n  }\n\n  render() {\n    const { isExporting, selectedOnly } = this.state;\n    if (!isExporting) return null;\n\n    return (\n      <PluginHost>\n        <Plugin name=\"export\">\n          <Action name=\"finishExport\" action={this.finishExport} />\n        </Plugin>\n        <GridExporterCore\n          {...this.props}\n          exportSelected={selectedOnly}\n        />\n      </PluginHost>\n    );\n  }\n}\n\nexport const GridExporter: React.ComponentType<ExporterProps> = GridExporterBase;\n"],"names":["React.memo","tableColumnsWithGrouping","React.createElement","Plugin","Getter","rowIdGetter","cellValueGetter","React.useCallback","tableColumnsWithDataRows","checkTableColumnExtensions","visibleTableColumns","orderedColumns","Excel.Workbook","maximumGroupLevel","groupOutlineLevels","rowsToExport","buildGroupTree","exportSummaryGetter","closeGroupGetter","Table","exportHeader","exportRows","closeSheet","FilteringState","SortingState","GroupingState","SummaryState","SelectionState","IntegratedFiltering","IntegratedSorting","IntegratedGrouping","IntegratedSummary","Action","Template","TemplateConnector","React.PureComponent","PluginHost"],"mappings":"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"}