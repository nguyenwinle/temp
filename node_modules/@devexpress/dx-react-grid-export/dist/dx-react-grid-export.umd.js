/**
 * Bundle of @devexpress/dx-react-grid-export
 * Generated: 2021-06-24
 * Version: 2.7.6
 * License: https://js.devexpress.com/Licensing
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@devexpress/dx-react-core'), require('@devexpress/dx-grid-core'), require('@devexpress/dx-react-grid'), require('exceljs/dist/exceljs.min.js')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', '@devexpress/dx-react-core', '@devexpress/dx-grid-core', '@devexpress/dx-react-grid', 'exceljs/dist/exceljs.min.js'], factory) :
  (global = global || self, factory((global.DevExpress = global.DevExpress || {}, global.DevExpress.DXReactGridExport = {}), global.React, global.DevExpress.DXReactCore, global.DevExpress.DXGridCore, global.DevExpress.DXReactGrid, global.ExcelJS));
}(this, (function (exports, React, dxReactCore, dxGridCore, dxReactGrid, Excel) { 'use strict';

  if (typeof process === "undefined") { var process = { env: {} }; }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  var showColumnWhenGroupedGetter = function (showColumnsWhenGrouped, columnExtensions) {
      if (columnExtensions === void 0) { columnExtensions = []; }
      var map = columnExtensions.reduce(function (acc, columnExtension) {
          acc[columnExtension.columnName] = columnExtension.showWhenGrouped;
          return acc;
      }, {});
      return function (columnName) { return map[columnName] || showColumnsWhenGrouped; };
  };
  /** @internal */
  var TableColumnsWithGrouping = React.memo(function (_a) {
      var indentColumnWidth = _a.indentColumnWidth, showColumnsWhenGrouped = _a.showColumnsWhenGrouped, columnExtensions = _a.columnExtensions;
      var tableColumnsComputed = function (_a) {
          var columns = _a.columns, tableColumns = _a.tableColumns, grouping = _a.grouping, draftGrouping = _a.draftGrouping;
          return dxGridCore.tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions));
      };
      return (React.createElement(dxReactCore.Plugin, null,
          React.createElement(dxReactCore.Getter, { name: "tableColumns", computed: tableColumnsComputed })));
  });
  TableColumnsWithGrouping.defaultProps = {
      indentColumnWidth: 0,
  };

  var GridCoreGetters = React.memo(function (_a) {
      var rows = _a.rows, columns = _a.columns, getRowId = _a.getRowId, getCellValue = _a.getCellValue;
      return (React.createElement(dxReactCore.Plugin, null,
          React.createElement(dxReactCore.Getter, { name: "rows", value: rows }),
          React.createElement(dxReactCore.Getter, { name: "getRowId", value: dxGridCore.rowIdGetter(getRowId, rows) }),
          React.createElement(dxReactCore.Getter, { name: "columns", value: columns }),
          React.createElement(dxReactCore.Getter, { name: "getCellValue", value: dxGridCore.cellValueGetter(getCellValue, columns) })));
  });

  var TableColumnsWithDataRowsGetter = React.memo(function (_a) {
      var columnExtensions = _a.columnExtensions;
      var tableColumnsComputed = React.useCallback(function (_a) {
          var columns = _a.columns;
          return (dxGridCore.tableColumnsWithDataRows(columns, columnExtensions));
      }, [columnExtensions]);
      dxGridCore.checkTableColumnExtensions(columnExtensions);
      return (React.createElement(dxReactCore.Plugin, null,
          React.createElement(dxReactCore.Getter, { name: "tableColumns", computed: tableColumnsComputed })));
  });

  var visibleTableColumnsComputed = function (_a) {
      var tableColumns = _a.tableColumns, hiddenColumnNames = _a.hiddenColumnNames;
      return dxGridCore.visibleTableColumns(tableColumns, hiddenColumnNames);
  };
  /** @internal */
  var VisibleTableColumns = React.memo(function (_a) {
      var hiddenColumnNames = _a.hiddenColumnNames;
      return (React.createElement(dxReactCore.Plugin, null,
          React.createElement(dxReactCore.Getter, { name: "hiddenColumnNames", value: hiddenColumnNames }),
          React.createElement(dxReactCore.Getter, { name: "tableColumns", computed: visibleTableColumnsComputed })));
  });
  VisibleTableColumns.defaultProps = {
      hiddenColumnNames: [],
  };

  /** @internal */
  var OrderedTableColumns = function (_a) {
      var order = _a.order;
      var columnsComputed = function (_a) {
          var tableColumns = _a.tableColumns;
          return dxGridCore.orderedColumns(tableColumns, order);
      };
      return (React.createElement(dxReactCore.Plugin, null,
          React.createElement(dxReactCore.Getter, { name: "tableColumns", computed: columnsComputed })));
  };
  OrderedTableColumns.defaultProps = {
      order: [],
  };

  var defaultSummaryMessages = {
      sum: 'Sum',
      min: 'Min',
      max: 'Max',
      avg: 'Avg',
      count: 'Count',
  };

  /* tslint:disable no-submodule-imports */
  /* tslint:enable no-submodule-imports */
  var createWorkbook = function () { return new Excel.Workbook(); };
  var createWorksheet = function (workbook) { return workbook.addWorksheet('Main'); };

  var maxGroupLevelComputed = function (_a) {
      var grouping = _a.grouping;
      return dxGridCore.maximumGroupLevel(grouping);
  };
  var outlineLevelsComputed = function (_a) {
      var grouping = _a.grouping;
      return dxGridCore.groupOutlineLevels(grouping);
  };
  var rowsToExportComputed = function (_a) {
      var rows = _a.rows, selection = _a.selection, grouping = _a.grouping, getCollapsedRows = _a.getCollapsedRows, getRowId = _a.getRowId, isGroupRow = _a.isGroupRow;
      return dxGridCore.rowsToExport(rows, selection, grouping, getCollapsedRows, getRowId, isGroupRow);
  };
  var groupTreeComputed = function (_a) {
      var rows = _a.rows, outlineLevels = _a.outlineLevels, grouping = _a.grouping, isGroupRow = _a.isGroupRow, groupSummaryItems = _a.groupSummaryItems;
      return dxGridCore.buildGroupTree(rows, outlineLevels, grouping, isGroupRow, groupSummaryItems);
  };
  var exportSummaryComputed = function (_a) {
      var worksheet = _a.worksheet, tableColumns = _a.tableColumns, customizeSummaryCell = _a.customizeSummaryCell;
      return dxGridCore.exportSummaryGetter(worksheet, tableColumns, customizeSummaryCell, defaultSummaryMessages);
  };
  var getCloseGroupComputed = function (_a) {
      var worksheet = _a.worksheet, groupTree = _a.groupTree, outlineLevels = _a.outlineLevels, maxGroupLevel = _a.maxGroupLevel, groupSummaryItems = _a.groupSummaryItems, exportSummary = _a.exportSummary;
      return dxGridCore.closeGroupGetter(worksheet, groupTree, outlineLevels, maxGroupLevel, groupSummaryItems, exportSummary);
  };
  var GridExporterCore = /*#__PURE__*/ (function (_super) {
      __extends(GridExporterCore, _super);
      function GridExporterCore() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.performExport = function (_, _a, _b) {
              var _c;
              var tableColumns = _a.tableColumns, dataColumns = _a.columns, exportSummary = _a.exportSummary, getCloseGroup = _a.getCloseGroup, getCellValue = _a.getCellValue, isGroupRow = _a.isGroupRow, rows = _a.rows, worksheet = _a.worksheet, workbook = _a.workbook, maxGroupLevel = _a.maxGroupLevel, totalSummaryItems = _a.totalSummaryItems, outlineLevels = _a.outlineLevels, groupTree = _a.groupTree;
              var finishExport = _b.finishExport;
              var _d = _this.props, onSave = _d.onSave, customizeCell = _d.customizeCell, customizeHeader = _d.customizeHeader, customizeFooter = _d.customizeFooter;
              var columns = tableColumns.filter(function (c) { return c.type === dxReactGrid.Table.COLUMN_TYPE; });
              customizeHeader(worksheet);
              dxGridCore.exportHeader(worksheet, columns);
              var dataRowsOffset = ((_c = worksheet.lastRow) === null || _c === void 0 ? void 0 : _c.number) + 1;
              dxGridCore.exportRows(worksheet, rows, dataColumns, columns, isGroupRow, outlineLevels, dataRowsOffset, getCellValue, getCloseGroup, customizeCell);
              dxGridCore.closeSheet(worksheet, groupTree, maxGroupLevel, dataRowsOffset, totalSummaryItems, exportSummary);
              customizeFooter(worksheet);
              onSave(workbook);
              finishExport();
          };
          return _this;
      }
      GridExporterCore.prototype.render = function () {
          var _a = this.props, propRows = _a.rows, propColumns = _a.columns, getCellValue = _a.getCellValue, getRowId = _a.getRowId, columnExtensions = _a.columnExtensions, columnOrder = _a.columnOrder, hiddenColumnNames = _a.hiddenColumnNames, grouping = _a.grouping, showColumnsWhenGrouped = _a.showColumnsWhenGrouped, groupColumnExtensions = _a.groupColumnExtensions, filters = _a.filters, sorting = _a.sorting, selection = _a.selection, totalSummaryItems = _a.totalSummaryItems, groupSummaryItems = _a.groupSummaryItems, customizeSummaryCell = _a.customizeSummaryCell, exportSelected = _a.exportSelected;
          var workbook = createWorkbook();
          var worksheet = createWorksheet(workbook);
          var summaryExists = totalSummaryItems || groupSummaryItems;
          var useGrouping = !!(grouping === null || grouping === void 0 ? void 0 : grouping.length);
          var useSelection = exportSelected && !!selection;
          var useFilters = !!filters;
          var useSorting = !!sorting;
          var useColumnOrder = !!columnOrder;
          var useColumnVisibility = !!hiddenColumnNames;
          return (React.createElement(dxReactCore.Plugin, null,
              React.createElement(GridCoreGetters, { rows: propRows, columns: propColumns, getRowId: getRowId, getCellValue: getCellValue }),
              React.createElement(TableColumnsWithDataRowsGetter, { columnExtensions: columnExtensions }),
              useColumnVisibility && (React.createElement(VisibleTableColumns, { hiddenColumnNames: hiddenColumnNames })),
              useColumnOrder && (React.createElement(OrderedTableColumns, { order: columnOrder })),
              React.createElement(dxReactCore.Getter, { name: "isExporting", value: true }),
              useFilters && (React.createElement(dxReactGrid.FilteringState, { filters: filters })),
              useSorting && (React.createElement(dxReactGrid.SortingState, { sorting: sorting })),
              useGrouping && (React.createElement(dxReactGrid.GroupingState, { grouping: grouping })),
              summaryExists && (React.createElement(dxReactGrid.SummaryState, { totalItems: totalSummaryItems, groupItems: groupSummaryItems })),
              useSelection && (React.createElement(dxReactGrid.SelectionState, { selection: selection })),
              useGrouping && (React.createElement(TableColumnsWithGrouping, { columnExtensions: groupColumnExtensions, showColumnsWhenGrouped: showColumnsWhenGrouped })),
              useFilters && (React.createElement(dxReactGrid.IntegratedFiltering, null)),
              useSorting && (React.createElement(dxReactGrid.IntegratedSorting, null)),
              useGrouping && (React.createElement(dxReactGrid.IntegratedGrouping, null)),
              summaryExists && (React.createElement(dxReactGrid.IntegratedSummary, null)),
              React.createElement(dxReactCore.Getter, { name: "customizeSummaryCell", value: customizeSummaryCell }),
              React.createElement(dxReactCore.Getter, { name: "workbook", value: workbook }),
              React.createElement(dxReactCore.Getter, { name: "worksheet", value: worksheet }),
              React.createElement(dxReactCore.Getter, { name: "maxGroupLevel", computed: maxGroupLevelComputed }),
              React.createElement(dxReactCore.Getter, { name: "outlineLevels", computed: outlineLevelsComputed }),
              React.createElement(dxReactCore.Getter, { name: "rows", computed: rowsToExportComputed }),
              React.createElement(dxReactCore.Getter, { name: "groupTree", computed: groupTreeComputed }),
              React.createElement(dxReactCore.Getter, { name: "exportSummary", computed: exportSummaryComputed }),
              React.createElement(dxReactCore.Getter, { name: "getCloseGroup", computed: getCloseGroupComputed }),
              React.createElement(dxReactCore.Action, { name: "performExport", action: this.performExport }),
              React.createElement(dxReactCore.Template, { name: "root" }, function () { return (React.createElement(dxReactCore.TemplateConnector, null, function (_, _a) {
                  var performExport = _a.performExport;
                  performExport();
                  return null;
              })); })));
      };
      GridExporterCore.defaultProps = {
          grouping: [],
          customizeHeader: function () { },
          customizeFooter: function () { },
          customizeCell: function () { },
          customizeSummaryCell: function () { },
      };
      return GridExporterCore;
  }(React.PureComponent));

  var GridExporterBase = /*#__PURE__*/ (function (_super) {
      __extends(GridExporterBase, _super);
      function GridExporterBase() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.state = {
              isExporting: false,
              selectedOnly: false,
          };
          _this.exportGrid = function (options) {
              _this.setState(__assign({ isExporting: true, selectedOnly: false }, options));
          };
          _this.finishExport = function () {
              // NOTE: we can't update state during the render phase
              window.setTimeout(function () {
                  _this.setState({
                      isExporting: false,
                      selectedOnly: false,
                  });
              }, 0);
          };
          return _this;
      }
      GridExporterBase.prototype.render = function () {
          var _a = this.state, isExporting = _a.isExporting, selectedOnly = _a.selectedOnly;
          if (!isExporting)
              return null;
          return (React.createElement(dxReactCore.PluginHost, null,
              React.createElement(dxReactCore.Plugin, { name: "export" },
                  React.createElement(dxReactCore.Action, { name: "finishExport", action: this.finishExport })),
              React.createElement(GridExporterCore, __assign({}, this.props, { exportSelected: selectedOnly }))));
      };
      return GridExporterBase;
  }(React.PureComponent));
  var GridExporter = GridExporterBase;

  exports.GridExporter = GridExporter;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=dx-react-grid-export.umd.js.map
